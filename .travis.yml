---
env:
  global:
    - CI=true
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config

# --------------------------
matrix:
  include:
  # linux
  - name: "LINUX"
    os: linux
    go: 1.12.7
    language: python
    before_install:
    - sudo apt-get install -y libvirt-dev

  # ORIGINAL WORKING VERSION
  - name: "High Sierra (10.13) and xcode9.3"
    os: osx
    sudo: required
    language: objective-c
    # 10.13 (see https://docs.travis-ci.com/user/osx-ci-environment/#OS-X-Version)
    osx_image: xcode9.3
    xcode_sdk: macosx10.13

  - name: "Sierra (10.12) and xcode8.3"
    os: osx
    sudo: required
    language: objective-c
    osx_image: xcode8.3
    xcode_sdk: macosx10.12

  - name: "Sierra (10.12) and xcode9"
    os: osx
    sudo: required
    language: objective-c
    osx_image: xcode9
    xcode_sdk: macosx10.12
    env: MY_HOMEBREW_UPDATE="1"

  - name: "Sierra (10.12) and xcode9.1"
    os: osx
    sudo: required
    language: objective-c
    osx_image: xcode9.1
    xcode_sdk: macosx10.12

  - name: "Sierra (10.12) and xcode9.2"
    os: osx
    sudo: required
    language: objective-c
    osx_image: xcode9.2
    xcode_sdk: macosx10.12

  - name: "High Sierra (10.13) and xcode9.4"
    os: osx
    sudo: required
    language: objective-c
    osx_image: xcode9.4
    xcode_sdk: macosx10.13

before_install:
  # ---------------------
  # SOURCE: https://github.com/Martiusweb/asynctest/blob/292e7519949901dfc49638cad2ff6c067e8a9dcb/.travis.yml
  - brew update
  - brew install docker docker-machine docker-compose
  # -----------------------
  - xcodebuild -version
  # Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  # Download minikube.
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.2.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  - mkdir -p $HOME/.kube $HOME/.minikube
  - touch $KUBECONFIG
  - sudo minikube start --vm-driver=none --kubernetes-version=v1.15.0
  - "sudo chown -R travis: $HOME/.minikube/"
  - travis_retry brew tap bossjones/octant

# https://github.com/LiliC/travis-minikube/blob/master/.travis.yml
script:
  # Following is just to demo that the kubernetes cluster works.
  - kubectl cluster-info
  # Verify kube-addon-manager.
  # kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
  # Wait for kube-dns to be ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
  # Create example Redis deployment on Kubernetes.
  - kubectl run travis-example --image=redis --labels="app=travis-example"
  # Make sure created pod is scheduled and running.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n default get pods -lapp=travis-example -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for travis-example deployment to be available"; kubectl get pods -n default; done

  - brew install bossjones/octant/octant


install:
- docker-machine create --driver virtualbox dev
